;; PL Project - Fall 2018
;; NUMEX interpreter

#lang racket
(provide (all-defined-out)) ;; so we can put tests in a second file

;; definition of structures for NUMEX programs

;; CHANGE add the missing ones

(struct var  (string) #:transparent)  ;; a variable, e.g., (var "foo")
(struct num  (int)    #:transparent)  ;; a constant number, e.g., (num 17)
(struct bool (boolean) #:transparent) ;; a boolean constant, e.g., (bool #f)
(struct plus  (e1 e2)  #:transparent)  ;; add two expressions
(struct minus (e1 e2)  #:transparent) ;; subtract two expression
(struct mult (e1 e2)   #:transparent) ;; multiply two expression
(struct div (e1 e2)    #:transparent) ;; divide two expression
(struct neg (e)        #:transparent) ;; neg of a number
(struct andalso (e1 e2) #:transparent) ;; logical conjection of two expression
(struct orelse (e1 e2) #:transparent) ;; logical disjunction of two expression
(struct cnd (e1 e2 e3) #:transparent) ;; it is a condition.if e1 then e2 else e3
(struct iseq (e1 e2 ) #:transparent)  ;; comparison two expression
(struct ifnzero (e1 e2 e3) #:transparent) ;;it is a condition.if e1 notzero then e2 else e3
(struct ifleq (e1 e2 e3 e4) #:transparent) ;; it is a condition.if e1 is strictly greater than e2 (e1 > e2) then e4 then e3
(struct lam  (nameopt formal body) #:transparent) ;; a recursive(?) 1-argument function
(struct apply (funexp actual)       #:transparent) ;; function application
(struct with (s e1 e2)                #:transparent) ;; a local binding (let s = e1 in e2)
(struct apair    (e1 e2)               #:transparent)   ;; pair constructor
(struct 1st   (e1)                   #:transparent)   ;; the  first part of a pair
(struct 2nd   (e1)                   #:transparent)   ;; the second part of a pair
(struct munit   ()      #:transparent) ;; unit value -- good for ending a list
(struct ismunit (e)     #:transparent) ;; if e1 is unit then true else false
;; a closure is not in "source" programs; it is what functions evaluate to
(struct closure (env f) #:transparent)


;; Problem 1
;; Part (a)
(define (racketlist->numexlist xs)
  (if (null? xs)
      (munit)
      (apair (car xs) (racketlist->numexlist (cdr xs)))))

;; Part (b)

(define (numexlist->racketlist xs)
  (if (equal? (eval-exp (ismunit xs)) (num 1) ) '()
      (cons (eval-exp (first xs))
          (numexlist->racketlist (eval-exp(second xs))))))

;; Problem 2

;; lookup a variable in an environment
;; Complete this function

(define (envlookup env str)
  (cond [(null? env) (error "unbound variable during evaluation" str)]
        [(equal? (car (car env)) str) (cdr (car env))]
        [#t (envlookup (cdr env) str)]))

;; Complete more cases for other kinds of NUMEX expressions.
;; We will test eval-under-env by calling it directly even though
;; "in real life" it would be a helper function of eval-exp.

(define (eval-under-env e env)
  (cond [(var? e) 
         (envlookup env (var-string e))]
        [(plus? e) 
         (let ([v1 (eval-under-env (plus-e1 e) env)]
               [v2 (eval-under-env (plus-e2 e) env)])
           (if (and (num? v1)
                    (num? v2))
               (num (+ (num-int v1) 
                       (num-int v2)))
               (error "NUMEX addition applied to non-number")))]

        [(minus? e) 
         (let ([v1 (eval-under-env (minus-e1 e) env)]
               [v2 (eval-under-env (minus-e2 e) env)])
           (if (and (num? v1)
                    (num? v2))
               (num (- (num-int v1) 
                       (num-int v2)))
               (error "NUMEX subtraction applied to non-number")))]


        [(mult? e) 
         (let ([v1 (eval-under-env (mult-e1 e) env)]
               [v2 (eval-under-env (mult-e2 e) env)])
           (if (and (num? v1)
                    (num? v2))
               (num (* (num-int v1) 
                       (num-int v2)))
               (error "NUMEX multiplication applied to non-number")))]

        [(div? e) 
         (let ([v1 (eval-under-env (div-e1 e) env)]
               [v2 (eval-under-env (div-e2 e) env)])
           (if (and (num? v1)
                    (num? v2))
               (if (equal? (num-int v2) 0)
                   (error "Division by zero .....")
                   (num (/ (num-int v1)(num-int v2))))

               (error "NUMEX division applied to non-number")))]

        

        [(andalso? e)
            (let ([v1 (eval-under-env (andalso-e1 e))])
              (if (bool? v1) ((if (eq? (bool-boolean v1) #f) (#f)
                                  (let ([v2 (eval-under-env (andalso-e2 e) env)])
                                          (if (bool? v2) (bool-boolean v2)
                                              (error "v2 is not bool"))
                                                                     )))
                  (error "v1 is not bool"))
              )]


        
         [(orelse? e)
            (let ([v1 (eval-under-env (orelse-e1 e))])
              (if (bool? v1) ((if (eq? (bool-boolean v1) #t) (#t)
                                 (let ([v2 (eval-under-env (orelse-e2 e) env)])
                                   (if (bool? v2) (bool-boolean v2) (error "v2 is not bool"))
                                                                     )))
                  (error "v1 is not bool"))
              )]


        [(cnd? e)
          (let ([v1 (eval-under-env (cnd-e1 e) env)])

            (if (bool? v1)
                (if(eq? (bool-boolean v1) #t) (eval-under-env (cnd-e2 e) env) (eval-under-env (cnd-e3 e) env))
                (error "V1 is not a boolean!!!!.."))
            )]

          


         [(neg? e) 
          (let ([v1 (eval-under-env (neg-e e) env)])
           (if (num? v1)
               (num (- (num-int v1)))
               (error "NUMEX negation applied to non-number")))]




         [(iseq? e) 
         (let ([v1 (eval-under-env (iseq-e1 e) env)]
               [v2 (eval-under-env (iseq-e2 e) env)])
         (cond [(and (num? v1)(num? v2))
               (if (eq? (num-int v1)  (num-int v2)) #t #f)                    
               ]
             
               [(and (bool? v1)(bool? v2))
              
               (if(eq? (bool-boolean v1)  (bool-boolean v2)) #t #f)       
               ]
               [#t error "condition not allowed.."]))
          ]



          [(ifnzero? e)
           (let ([v1 (eval-under-env (ifnzero-e1 e) env)]
                 )
             (if (num? v1) (if (equal? (num-int v1)  0) (eval-under-env (ifnzero-e3 e) env) (eval-under-env (ifnzero-e2 e) env)) (error "v1 is not number"))
           
           )]

          [(ifleq? e)
           (let ([v1 (eval-under-env (ifleq-e1 e) env)]
                 [v2 (eval-under-env (ifleq-e2 e) env)]
                 )
             (if (and (num? v1) (num? v2)) (if (> (num-int v1) (num-int v2)) (eval-under-env (ifleq-e4 e) env) (eval-under-env (ifleq-e3 e) env)
                                            ) (error "v1 & v2 is not num"))
           )]




          [(with? e)
            (let* ([v (eval-under-env (with-e1 e) env)]
            [ext-env (cons (cons (with-s e) v) env)])
            (eval-under-env (with-e2 e) ext-env))]


            [(apply? e)
             (let ([v1 (eval-under-env (apply-funexp e) env)]
             [v2 (eval-under-env (apply-actual e) env)])
             (if (closure? v1)
                  (let* ([c-fun (closure-f v1)]
                  [c-env (closure-env v1)]
                  [ext-env-temp (cons (cons (lam-formal c-fun) v2) c-env)]
                  [ext-env (if (lam-nameopt c-fun)
                               (cons (cons (lam-nameopt c-fun) v1) ext-env-temp)
                                 ext-env-temp)])
                (eval-under-env (lam-body c-fun) ext-env))
              (error "NUMEX call first-subexpression not closure")))]



          
          [(apair? e)
            (let ([v1 (eval-under-env (apair-e1 e) env)]
              [v2 (eval-under-env (apair-e2 e) env)])
               (apair v1 v2))]

 
         [(1st? e)
           (let ([v (eval-under-env (1st-e1 e) env)])
             (if (apair? v)
                 (apair-e1 v)
                 (error "Numex first applied to non-pair")))]
         

         [(2nd? e)
          (let ([v (eval-under-env (2nd-e1 e) env)])
            (if (apair? v)
                (apair-e2 v)
                (error "Numex snd applied to non-pair")))]



         [(ismunit? e)
          (let ([v (eval-under-env (ismunit-e e) env)])
            (if (munit? v) (num 1) (num 0)))]
         [(munit? e)
         (munit)]

         [(closure? e) e]

         [(lam? e)
         (closure env e)]


         
        ;; CHANGE add more cases here
        [#t (error (format "bad NUMEX expression: ~v" e))]))

;; Do NOT change
(define (eval-exp e)
  (eval-under-env e null))

;;  Problem 3

;;  first-part

(define (ifmunit e1 e2 e3) (if (equal?  e1 (munit)) e2 e3))



;;  second-part

(define (with* bs e2)
  (if (null? bs)
      e2
      (with (caar bs) (cdar bs) (with* (cdr bs) e2))))



;;  third-part

(define (ifneq e1 e2 e3 e4) 
  (with* (list (cons "_x" e1) (cons "_y" e2))
         (not(equal? (var "_x") (var "_y")) )e3 e4))




;; Problem 4

;;  Part(a)




(define numex-filter (lam "numexfilter1" "x"
                          (lam  "numexfilter2"  "y"
                                (with "v" (1st (var "y")) 
                                                          [cnd (ismunit (var "v")) (munit)
                                                                 
                                                                
                                                                       (ifnzero (apply (var "x") (var "v"))
                                                                                (apair (apply (var "x") (var "v")) (apply (var "numex-filter1") (2nd (var "y"))))
                                                                                (apply "numex-filter1" (2nd (var "y")))
                                                                                
                                                                                )]))))
                                                                          

;;  second-part

              
(define numex-all-gt
  (lam "numex-all-gt-1" "i"
       (lam "numex-all-gt-2" "li"
            (apply (apply (var "numex-filter")  (lam "lessthan" "x" (ifleq (var "x") (var "i") (var "x")(num 0)))) (var "li")))))
              
    



;; Challenge Problem

(struct fun-challenge (nameopt formal body freevars) #:transparent) ;; a recursive(?) 1-argument function

;; We will test this function directly, so it must do
;; as described in the assignment
(define (compute-free-vars e) "CHANGE")

;; Do NOT share code with eval-under-env because that will make grading
;; more difficult, so copy most of your interpreter here and make minor changes
(define (eval-under-env-c e env) "CHANGE")

;; Do NOT change this
(define (eval-exp-c e)
  (eval-under-env-c (compute-free-vars e) null))
